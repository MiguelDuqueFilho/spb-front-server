generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  email     String  @unique
  hash      String
  firstName String?
  lastname  String?

  @@map("users")
}

model FileEntity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  originalName String
  bucket       String
  key          String @unique
  mimeType     String
  size         Int
  url          String

  @@map("FilesEntity")
}

model Service {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  service     String  @unique // @db.VarChar(15)
  description String // @db.VarChar(255)
  domain      String //@db.VarChar(15)
  Events      Event[]

  @@map(name: "Services")
}

model Event {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  codEvent  String    @unique // @db.VarChar(15)
  eventName String? //   @db.VarChar(255)
  flow      String //   @db.VarChar(10)
  serviceId Int? // @db.VarChar(15)
  servico   Service?  @relation(fields: [serviceId], references: [id])
  isConvert Boolean   @default(false)
  eventJson String    @default("[]")
  Messages  Message[]

  @@map(name: "Events")
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  codMsg            String @unique // @db.VarChar(15)
  tag               String // @db.VarChar(255)
  description       String // @db.VarChar(255)
  origenEntity      String // @db.VarChar(50)
  destinationEntity String // @db.VarChar(50)
  codEventId        String // @db.VarChar(15)
  Events            Event? @relation(fields: [codEventId], references: [codEvent])

  @@map(name: "Messages")
}

model MessageCreated {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  codMsg     String
  xmlMessage String // @db.Xml
  process    String  @default("PENDING") // PROCESSING - COMPLETED
  status     String  @default("VALIDATED") // ERROR
  error      String?

  @@map(name: "MessagesCreated")
}
